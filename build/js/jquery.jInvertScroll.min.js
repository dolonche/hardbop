!function(r){r.jInvertScroll=function(t,h){var c=r.extend({width:"auto",height:"auto",onScroll:function(t){}},h);if(!("Object"==typeof t&&0<t.length)){var l=[],i=0;r.each(t,function(t,h){r(h).each(function(t){var h={width:r(this).width(),height:r(this).height(),el:r(this)};l.push(h),i<h.width&&(i=h.width)})}),"auto"==c.width&&(c.width=i),"auto"==c.height&&(c.height=i),r("body").css("height",c.height+"px"),r(window).on("scroll resize",function(t){var h=r(this).scrollTop(),i=r(document).height(),o=r(this).height(),e=r(this).width();console.log(h+"+"+i+"+"+o+"+"+e);var n=(h/(i-o)).toFixed(4);"function"==typeof c.onScroll&&c.onScroll.call(this,n),r.each(l,function(t,h){var i=-1*Math.floor((h.width-e)*n);h.el.css("left",i)})})}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qSW52ZXJ0U2Nyb2xsLmpzIl0sIm5hbWVzIjpbIiQiLCJqSW52ZXJ0U2Nyb2xsIiwic2VsIiwib3B0aW9ucyIsImNvbmZpZyIsImV4dGVuZCIsIndpZHRoIiwiaGVpZ2h0Iiwib25TY3JvbGwiLCJwZXJjZW50IiwibGVuZ3RoIiwiZWxlbWVudHMiLCJsb25nZXN0IiwiZWFjaCIsImkiLCJ2YWwiLCJlIiwidG1wIiwidGhpcyIsImVsIiwicHVzaCIsImNzcyIsIndpbmRvdyIsIm9uIiwiY3VyclkiLCJzY3JvbGxUb3AiLCJ0b3RhbEhlaWdodCIsImRvY3VtZW50Iiwid2luSGVpZ2h0Iiwid2luV2lkdGgiLCJjb25zb2xlIiwibG9nIiwidG9GaXhlZCIsImNhbGwiLCJwb3MiLCJNYXRoIiwiZmxvb3IiLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJDQTJCQyxTQUFVQSxHQUNUQSxFQUFFQyxjQUFnQixTQUFVQyxFQUFLQyxHQUMvQixJQVFJQyxFQUFTSixFQUFFSyxPQVJBLENBQ2JDLE1BQU8sT0FDUEMsT0FBUSxPQUNSQyxTQUFVLFNBQVVDLE1BS1VOLEdBRWhDLEtBQW1CLGlCQUFSRCxHQUFpQyxFQUFiQSxFQUFJUSxRQUFuQyxDQUlBLElBQUlDLEVBQVcsR0FDWEMsRUFBVSxFQUdkWixFQUFFYSxLQUFLWCxFQUFLLFNBQVVZLEVBQUdDLEdBQ3ZCZixFQUFFZSxHQUFLRixLQUFLLFNBQVVHLEdBQ3BCLElBQUlDLEVBQU0sQ0FDUlgsTUFBT04sRUFBRWtCLE1BQU1aLFFBQ2ZDLE9BQVFQLEVBQUVrQixNQUFNWCxTQUNoQlksR0FBSW5CLEVBQUVrQixPQUdSUCxFQUFTUyxLQUFLSCxHQUVWTCxFQUFVSyxFQUFJWCxRQUNoQk0sRUFBVUssRUFBSVgsV0FNQSxRQUFoQkYsRUFBT0UsUUFDVEYsRUFBT0UsTUFBUU0sR0FHSSxRQUFqQlIsRUFBT0csU0FDVEgsRUFBT0csT0FBU0ssR0FJbEJaLEVBQUUsUUFBUXFCLElBQUksU0FBVWpCLEVBQU9HLE9BQVMsTUFHeENQLEVBQUVzQixRQUFRQyxHQUFHLGdCQUFpQixTQUFVUCxHQUN0QyxJQUFJUSxFQUFReEIsRUFBRWtCLE1BQU1PLFlBQ2hCQyxFQUFjMUIsRUFBRTJCLFVBQVVwQixTQUMxQnFCLEVBQVk1QixFQUFFa0IsTUFBTVgsU0FDcEJzQixFQUFXN0IsRUFBRWtCLE1BQU1aLFFBQ3ZCd0IsUUFBUUMsSUFBSVAsRUFBUSxJQUFNRSxFQUFjLElBQU1FLEVBQVksSUFBTUMsR0FFaEUsSUFBSXBCLEdBQVdlLEdBQVNFLEVBQWNFLElBQVlJLFFBQVEsR0FHM0IsbUJBQXBCNUIsRUFBT0ksVUFDaEJKLEVBQU9JLFNBQVN5QixLQUFLZixLQUFNVCxHQUs3QlQsRUFBRWEsS0FBS0YsRUFBVSxTQUFVRyxFQUFHSyxHQUM1QixJQUFJZSxHQUFxRCxFQUEvQ0MsS0FBS0MsT0FBT2pCLEVBQUdiLE1BQVF1QixHQUFZcEIsR0FDN0NVLEVBQUdBLEdBQUdFLElBQUksT0FBUWEsU0FuRTFCLENBdUVFRyIsImZpbGUiOiJqcXVlcnkuakludmVydFNjcm9sbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICpcdGpRdWVyeSBQbHVnaW4gZm9yIHNpbXBsZSB2ZXJ0aWNhbCBzY3JvbGxpbmcgLSBob3Jpem9udGFsIG1vdmVtZW50IHBhcmFsbGF4IGVmZmVjdFxuICpcdEkgd3JvdGUgdGhpcyBwbHVnaW4gZm9yIGEgcHJvamVjdCB3ZSBoYXZlIGRvbmUuXG4gKlxuICpcdExpY2Vuc2U6XG4gKlx0VGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKlxuICogICBDb3B5cmlnaHQgKGMpIDIwMTMgcGl4eGVsZmFjdG9yeVxuICogICBcbiAqICAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogICBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiAgIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqICAgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogICBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqICAgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqICAgXG4gKiAgIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiAgIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogICBcbiAqICAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogICBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqICAgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiAgIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqICAgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqICAgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogICBUSEUgU09GVFdBUkUuXG4gKiovXG4oZnVuY3Rpb24gKCQpIHtcbiAgJC5qSW52ZXJ0U2Nyb2xsID0gZnVuY3Rpb24gKHNlbCwgb3B0aW9ucykge1xuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgIHdpZHRoOiAnYXV0bycsIC8vIFRoZSBob3Jpem9udGFsIGNvbnRhaW5lciB3aWR0aFxuICAgICAgaGVpZ2h0OiAnYXV0bycsIC8vIEhvdyBmYXIgdGhlIHVzZXIgY2FuIHNjcm9sbCBkb3duIChzaG9ydGVyIGRpc3RhbmNlID0gZmFzdGVyIHNjcm9sbGluZylcbiAgICAgIG9uU2Nyb2xsOiBmdW5jdGlvbiAocGVyY2VudCkgeyAvLyBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB1c2VyIHNjcm9sbHMgZG93biwgdGhlIHBlcmNlbnRhZ2Ugb2YgaG93IGZhciB0aGUgdXNlciBoYXMgc2Nyb2xsZWQgZG93biBnZXRzIHBhc3NlZCBhcyBwYXJhbWV0ZXIgKGZvcm1hdDogMC54eHh4IC0gMS4wMDAwKVxuICAgICAgICAvLyBkbyB3aGF0ZXZlciB5b3UgbGlrZVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY29uZmlnID0gJC5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHR5cGVvZiBzZWwgPT09ICdPYmplY3QnICYmIHNlbC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGxvbmdlc3QgPSAwO1xuXG4gICAgLy8gRXh0cmFjdCBhbGwgc2VsZWN0ZWQgZWxlbWVudHMgZnJvbSBkb20gYW5kIHNhdmUgdGhlbSBpbnRvIGFuIGFycmF5XG4gICAgJC5lYWNoKHNlbCwgZnVuY3Rpb24gKGksIHZhbCkge1xuICAgICAgJCh2YWwpLmVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIHRtcCA9IHtcbiAgICAgICAgICB3aWR0aDogJCh0aGlzKS53aWR0aCgpLFxuICAgICAgICAgIGhlaWdodDogJCh0aGlzKS5oZWlnaHQoKSxcbiAgICAgICAgICBlbDogJCh0aGlzKVxuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudHMucHVzaCh0bXApO1xuXG4gICAgICAgIGlmIChsb25nZXN0IDwgdG1wLndpZHRoKSB7XG4gICAgICAgICAgbG9uZ2VzdCA9IHRtcC53aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBVc2UgdGhlIGxvbmdlc3QgZWxlbWVudHMgd2lkdGggKyBoZWlnaHQgaWYgc2V0IHRvIGF1dG9cbiAgICBpZiAoY29uZmlnLndpZHRoID09ICdhdXRvJykge1xuICAgICAgY29uZmlnLndpZHRoID0gbG9uZ2VzdDtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmhlaWdodCA9PSAnYXV0bycpIHtcbiAgICAgIGNvbmZpZy5oZWlnaHQgPSBsb25nZXN0O1xuICAgIH1cblxuICAgIC8vIFNldCB0aGUgYm9keSB0byB0aGUgc2VsZWN0ZWQgaGVpZ2h0XG4gICAgJCgnYm9keScpLmNzcygnaGVpZ2h0JywgY29uZmlnLmhlaWdodCArICdweCcpO1xuXG4gICAgLy8gTGlzdGVuIGZvciB0aGUgYWN0dWFsIHNjcm9sbCBldmVudFxuICAgICQod2luZG93KS5vbignc2Nyb2xsIHJlc2l6ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VyclkgPSAkKHRoaXMpLnNjcm9sbFRvcCgpO1xuICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gJChkb2N1bWVudCkuaGVpZ2h0KCk7XG4gICAgICB2YXIgd2luSGVpZ2h0ID0gJCh0aGlzKS5oZWlnaHQoKTtcbiAgICAgIHZhciB3aW5XaWR0aCA9ICQodGhpcykud2lkdGgoKTtcbiAgICAgIGNvbnNvbGUubG9nKGN1cnJZICsgJysnICsgdG90YWxIZWlnaHQgKyAnKycgKyB3aW5IZWlnaHQgKyAnKycgKyB3aW5XaWR0aCk7XG4gICAgICAvLyBDdXJyZW50IHBlcmNlbnR1YWwgcG9zaXRpb25cbiAgICAgIHZhciBwZXJjZW50ID0gKGN1cnJZIC8gKHRvdGFsSGVpZ2h0IC0gd2luSGVpZ2h0KSkudG9GaXhlZCg0KTtcblxuICAgICAgLy8gQ2FsbCB0aGUgb25TY3JvbGwgY2FsbGJhY2tcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLm9uU2Nyb2xsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbmZpZy5vblNjcm9sbC5jYWxsKHRoaXMsIHBlcmNlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBkbyB0aGUgcG9zaXRpb24gY2FsY3VsYXRpb24gZm9yIGVhY2ggZWxlbWVudFxuICAgICAgLy92YXIgcG9zID0gTWF0aC5mbG9vcigoZWwud2lkdGggLSB3aW5XaWR0aCAtIDEwKSAqIHBlcmNlbnQpKiAtMTsgd2l0aCBzY3JvbGxcbiAgICAgICQuZWFjaChlbGVtZW50cywgZnVuY3Rpb24gKGksIGVsKSB7XG4gICAgICAgIHZhciBwb3MgPSBNYXRoLmZsb29yKChlbC53aWR0aCAtIHdpbldpZHRoKSAqIHBlcmNlbnQpICogLTE7XG4gICAgICAgIGVsLmVsLmNzcygnbGVmdCcsIHBvcyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0oalF1ZXJ5KSk7Il19
